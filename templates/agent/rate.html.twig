{% extends 'front/base.html.twig' %}

{% block title %}Rate Agent{% endblock %}

{% block hero_banner %}
<div class="container-xxl py-5 bg-primary hero-header mb-5">
    <div class="container my-5 py-5 px-lg-5">
        <div class="row g-5 py-5">
            <div class="col-12 text-center">
                <h1 class="text-white animated zoomIn">Rate Our Agent</h1>
                <hr class="bg-white mx-auto mt-0" style="width: 90px;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb justify-content-center">
                        <li class="breadcrumb-item"><a class="text-white" href="{{ path('app_front_home') }}">Home</a></li>
                        <li class="breadcrumb-item"><a class="text-white" href="{{ path('agent_list') }}">Agents</a></li>
                        <li class="breadcrumb-item text-white active" aria-current="page">Rate Agent</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex align-items-center">
                        <img src="{{ asset(agent.pictureP) }}" class="rounded-circle me-3" alt="{{ agent.name }}" style="width: 60px; height: 60px; object-fit: cover;">
                        <h5 class="mb-0">Rate {{ agent.name }}</h5>
                    </div>
                </div>
                <div class="card-body">
                    {% for label, messages in app.flashes %}
                        {% for message in messages %}
                            <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                                {{ message }}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        {% endfor %}
                    {% endfor %}

                    {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
                    
                    <div class="mb-4 text-center">
                        <div class="rating-stars">
                            <label class="star-label">Rating:</label>
                            <div class="stars">
                                {% for i in 1..5 %}
                                    <input type="radio" id="star{{ i }}" name="{{ form.rating.vars.full_name }}" value="{{ i }}" {% if form.rating.vars.value == i %}checked{% endif %} class="star-input">
                                    <label for="star{{ i }}" class="star"><i class="bi bi-star-fill"></i></label>
                                {% endfor %}
                            </div>
                            {{ form_errors(form.rating) }}
                        </div>
                    </div>

                    <div class="mb-3">
                        {{ form_label(form.comment, 'Your Review', {'label_attr': {'class': 'form-label'}}) }}
                        <div class="input-group">
                            {{ form_widget(form.comment, {'attr': {'class': 'form-control', 'rows': '5', 'placeholder': 'Tell us about your experience with this agent...', 'required': 'required', 'id': 'comment-field'}}) }}
                            <button type="button" class="btn btn-outline-primary" id="start-recording">
                                <i class="bi bi-mic-fill"></i>
                            </button>
                        </div>
                        {{ form_errors(form.comment) }}
                    </div>

                    <div class="text-center mt-4">
                        {{ form_widget(form.submit, {'attr': {'class': 'btn btn-primary px-4'}}) }}
                        <a href="{{ path('agent_list') }}" class="btn btn-outline-secondary px-4 ms-2">Cancel</a>
                    </div>

                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .rating-stars {
        margin: 20px 0;
    }
    
    .star-label {
        display: block;
        margin-bottom: 10px;
        font-weight: 500;
    }
    
    .stars {
        display: flex;
        flex-direction: row-reverse;
        justify-content: center;
    }
    
    .star-input {
        display: none;
    }
    
    .star {
        cursor: pointer;
        font-size: 30px;
        padding: 0 5px;
        color: #ccc;
        transition: color 0.2s;
    }
    
    .star:hover,
    .star:hover ~ .star,
    .star-input:checked ~ .star {
        color: #FFD700;
    }
    
    .input-group {
        position: relative;
    }
    
    #start-recording {
        position: absolute;
        right: 10px;
        top: 10px;
        z-index: 10;
    }
    
    #start-recording.recording {
        background-color: #dc3545;
        color: white;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const startButton = document.getElementById('start-recording');
        const commentField = document.getElementById('comment-field');
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        let audioStream;

        startButton.addEventListener('click', async () => {
            if (!isRecording) {
                try {
                    audioStream = await navigator.mediaDevices.getUserMedia({ 
                        audio: {
                            sampleRate: 16000,
                            channelCount: 1,
                            echoCancellation: true,
                            noiseSuppression: true
                        } 
                    });
                    
                    mediaRecorder = new MediaRecorder(audioStream, {
                        mimeType: 'audio/webm;codecs=opus'
                    });
                    
                    audioChunks = [];

                    mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            audioChunks.push(event.data);
                        }
                    };

                    mediaRecorder.onstop = async () => {
                        try {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm;codecs=opus' });
                            
                            // Convert to WAV format
                            const audioContext = new AudioContext();
                            const arrayBuffer = await audioBlob.arrayBuffer();
                            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
                            
                            const wavBlob = await convertToWav(audioBuffer);
                            
                            const response = await fetch('https://api.deepgram.com/v1/listen', {
                                method: 'POST',
                                headers: {
                                    'Authorization': 'Token 64f6772454979d903fe8f2cea797192bff7aacb8',
                                    'Content-Type': 'audio/wav'
                                },
                                body: wavBlob
                            });

                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }

                            const data = await response.json();
                            if (data.results && data.results.channels && data.results.channels[0].alternatives) {
                                const transcript = data.results.channels[0].alternatives[0].transcript;
                                commentField.value = transcript;
                            } else {
                                throw new Error('No transcription results found');
                            }
                        } catch (error) {
                            console.error('Error transcribing audio:', error);
                            alert('Error transcribing audio: ' + error.message);
                        } finally {
                            // Clean up audio stream
                            if (audioStream) {
                                audioStream.getTracks().forEach(track => track.stop());
                            }
                        }
                    };

                    mediaRecorder.start(1000); // Collect data every second
                    isRecording = true;
                    startButton.classList.add('recording');
                    startButton.innerHTML = '<i class="bi bi-stop-fill"></i>';
                } catch (error) {
                    console.error('Error accessing microphone:', error);
                    alert('Error accessing microphone: ' + error.message);
                }
            } else {
                mediaRecorder.stop();
                isRecording = false;
                startButton.classList.remove('recording');
                startButton.innerHTML = '<i class="bi bi-mic-fill"></i>';
            }
        });

        // Function to convert AudioBuffer to WAV format
        function convertToWav(audioBuffer) {
            const numChannels = audioBuffer.numberOfChannels;
            const sampleRate = audioBuffer.sampleRate;
            const format = 1; // PCM
            const bitDepth = 16;
            
            const bytesPerSample = bitDepth / 8;
            const blockAlign = numChannels * bytesPerSample;
            
            const wav = new ArrayBuffer(44 + audioBuffer.length * blockAlign);
            const view = new DataView(wav);
            
            // Write WAV header
            writeString(view, 0, 'RIFF');
            view.setUint32(4, 36 + audioBuffer.length * blockAlign, true);
            writeString(view, 8, 'WAVE');
            writeString(view, 12, 'fmt ');
            view.setUint32(16, 16, true);
            view.setUint16(20, format, true);
            view.setUint16(22, numChannels, true);
            view.setUint32(24, sampleRate, true);
            view.setUint32(28, sampleRate * blockAlign, true);
            view.setUint16(32, blockAlign, true);
            view.setUint16(34, bitDepth, true);
            writeString(view, 36, 'data');
            view.setUint32(40, audioBuffer.length * blockAlign, true);
            
            // Write audio data
            const offset = 44;
            const channelData = audioBuffer.getChannelData(0);
            for (let i = 0; i < channelData.length; i++) {
                const sample = Math.max(-1, Math.min(1, channelData[i]));
                view.setInt16(offset + i * 2, sample * 0x7FFF, true);
            }
            
            return new Blob([wav], { type: 'audio/wav' });
        }

        function writeString(view, offset, string) {
            for (let i = 0; i < string.length; i++) {
                view.setUint8(offset + i, string.charCodeAt(i));
            }
        }

        // Form validation
        const form = document.querySelector('.needs-validation');
        
        form.addEventListener('submit', function(event) {
            const ratingInputs = document.querySelectorAll('input[name="{{ form.rating.vars.full_name }}"]');
            const commentInput = document.querySelector('textarea[name="{{ form.comment.vars.full_name }}"]');
            let ratingSelected = false;
            
            ratingInputs.forEach(input => {
                if (input.checked) {
                    ratingSelected = true;
                }
            });
            
            if (!ratingSelected) {
                event.preventDefault();
                event.stopPropagation();
                alert('Please select a rating before submitting.');
            }
            
            if (!commentInput.value.trim()) {
                event.preventDefault();
                event.stopPropagation();
                alert('Please provide a comment before submitting.');
            }
        });
    });
</script>
{% endblock %}